""""""""""""""""""""""
"  General settings  "
""""""""""""""""""""""

filetype plugin indent on       " enable filetype detection, plugin, indent
syntax enable                   " enable syntax highlight
set background=dark             " use a dark background
set cursorline                  " highlight current line
set lazyredraw                  " only redraw when necessary
set autoread                    " reload file when changed outside vim
set backspace=2                 " backspace on indent,eol,start
set showmatch                   " show matching brackets
set scrolloff=7                 " keep some lines from the top and the bottom
set hidden                      " buffer becoes hidden when it is abandoned
set magic                       " more natural regexp
set laststatus=2                " always show the status line
set wrap                        " allow wrap lines
" Wild command
set wildmenu                    " visual autocomplete for command menu
set wildignorecase              " case insensitive in command line
" Folding
set foldmethod=syntax           " folds defined by syntax
set nofoldenable                " open all folds by default
" Encoding
set encoding=utf8               " set encoding to utf-8
set fileformats=unix,mac,dos    " set end-of-line (EOL) formats
" Line numbers
set number             " enable line numbers
set relativenumber     " show relative line numbers
" Indentation
set tabstop=4          " number of visual spaces per tab
set softtabstop=4      " number of spaces per tab when editing
set expandtab          " tabs are spaces
set shiftround         " round to multiple of shiftwidth when adjusing indentation
set shiftwidth=4       " number of spaces for each step of autoindent
set autoindent         " auto indent on a new line
" Key timeout
set notimeout          " no timeout for mappings
set ttimeout           " allow timeout for keycodes
" Search
set incsearch          " search as characters are enters
set hlsearch           " highlight matches
set ignorecase         " ignore case when searching lowercase
set smartcase          " do not ignore case when searching uppercase
" Backups
set nobackup           " disable backups
set noswapfile         " disable swapfiles


""""""""""""""""""""""""""""""""
"  Other hacks & key bindings  "
""""""""""""""""""""""""""""""""

" Use space as a leader key
let mapleader="\<Space>"

" File explorer
let g:netrw_banner = 0
let g:netrw_winsize = 24
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
noremap <leader>e :Lexplore<cr>

" Spell check
autocmd BufEnter *.md set spell
autocmd BufEnter *.tex set spell

" Clipboard sharing
if has("unnamed") | set clipboard=unnamed | set mouse=a | endif

" Treat long lines as break lines
noremap <expr> j v:count ? 'j' : 'gj'
noremap <expr> k v:count ? 'k' : 'gk'

" Quick highlight removal
noremap <silent> <leader><cr> :noh<cr>

" Quick tab operations
noremap go :tabnew<cr>
noremap gc :tabclose<cr>

" :W sudo saves the file
command W w !sudo tee % > /dev/null

" Jump to last position everytime
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Toggle quickfix window
function! QuickFixToggle()
    let nr1 = winnr("$") | cwindow
    let nr2 = winnr("$")
    if nr1 == nr2 | cclose | endif
endfunction
nnoremap <silent> <leader>q :call QuickFixToggle()<cr>


"""""""""""""""""""""
"  Plugin settings  "
"""""""""""""""""""""

" Bootstrap vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync
endif

call plug#begin('~/.vim/bundle')
" ----8<-------------------
Plug 'w0rp/ale'
Plug 'maralla/completor.vim'
    let g:completor_python_binary = "python3"
    let g:completor_complete_options = "menuone,noselect,noinsert"
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-rsi'
Plug 'scrooloose/nerdcommenter'
Plug 'wellle/targets.vim'
Plug 'tpope/vim-surround'
Plug 'google/vim-searchindex'
Plug 'easymotion/vim-easymotion'
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_smartcase  = 1
    map s <plug>(easymotion-s2)
Plug 'ctrlpvim/ctrlp.vim'
    map <leader>f :CtrlPBuffer<cr>
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'joshdick/onedark.vim'
Plug 'itchyny/lightline.vim'
    let g:lightline = {'colorscheme': 'onedark'}
Plug 'thinca/vim-quickrun'
Plug 'sheerun/vim-polyglot'
" ----8<-------------------
call plug#end()
colorscheme onedark
"if (empty($TMUX) && has("termguicolors")) | set termguicolors | endif
