"""""""""""""""""""""""""""
" Basic settings
"""""""""""""""""""""""""""

" Set no compatible
set nocompatible

" Show (relative) line number
set number
set relativenumber

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
let mapleader = ","
let g:mapleader = ","

" Fast save and quit
nmap <leader>w :w!<cr>
nmap <leader>q :qa!<cr>
nmap <leader>x :x!<cr>

" :W sudo saves the file 
command W w !sudo tee % > /dev/null

" Highlight cursor line
set cul

" Set 7 lines to the cursor - when moving vertically
set so=7

" Turn on the WiLd menu
set wildmenu

" Always show current position
set ruler

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent

" No end of line
set noeol

" Ignore/Smart case when searching
set ignorecase
set smartcase

" Highlight/Increase search results
set hlsearch
set incsearch 

" Don't redraw while executing macros
set lazyredraw 

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch 

" No annoying sound on errors
set noerrorbells
set novisualbell

" Always show the status line
set laststatus=2

" Enable syntax highlighting
syntax enable 

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,mac,dos

" Turn backup off
set nobackup
set nowb
set noswapfile

" Use spaces instead of tabs
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

" Auto/Smart indent
set ai
set si

" Wrap lines
set wrap

" Enable mouse in all modes
set mouse=a

" Use system clipboard
if $TMUX == "" && $SCREEN_NO == ""
    set clipboard+=unnamed
endif

" Set spell for markdown and tex
autocmd BufEnter *.md set spell
autocmd BufEnter *.tex set spell

" Treat long lines as break lines
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Useful mappings for managing buffers
map <leader>bd :bd<cr>
map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>tc :tabclose<cr>

" Jump to last position
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif


"""""""""""""""""""""""""""
" Plugin settings
"""""""""""""""""""""""""""

" Bootstrap vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync
endif

call plug#begin('~/.vim/bundle')

Plug 'ctrlpvim/ctrlp.vim'
Plug 'easymotion/vim-easymotion'
Plug 'henrik/vim-indexed-search'
Plug 'honza/vim-snippets'
Plug 'jiangmiao/auto-pairs'
Plug 'lervag/vimtex'
Plug 'ludovicchabant/vim-gutentags'
Plug 'maralla/completor.vim'
Plug 'mhinz/vim-grepper'
Plug 'plasticboy/vim-markdown'
Plug 'rakr/vim-one'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'SirVer/ultisnips'
Plug 'terryma/vim-multiple-cursors'
Plug 'thinca/vim-quickrun'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'w0rp/ale'

call plug#end()

" ---8<----------------------

" easymotion/vim-easymotion
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase  = 1
nmap <leader>s <plug>(easymotion-overwin-f2)

" lervag/vimtex
let g:vimtex_latexmk_callback = 0

" maralla/completor.vim
let g:completor_python_binary = 'python3'

" mhinz/vim-grepper
nnoremap <leader>g :Grepper -tool rg<cr>

" plasticboy/vim-markdown
let g:vim_markdown_folding_disabled = 1

" rakr/vim-one
set background=dark
"" true color
if has("termguicolors") && &t_Co == 256
    if $TERM_PROGRAM == "Apple_Terminal" && $TMUX == ""
        colorscheme desert
    else
        colorscheme one
        set termguicolors
        set t_8f=[38;2;%lu;%lu;%lum
        set t_8b=[48;2;%lu;%lu;%lum
    endif
else
    colorscheme desert
endif

" scrooloose/nerdtree
nmap <f9> :NERDTreeToggle<cr>

" SirVer/ultisnips
let g:UltiSnipsExpandTrigger = '<tab>'

" thinca/vim-quickrun
nmap <f5> :QuickRun<cr>

" vim-airline/vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
